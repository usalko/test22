#!/bin/bash

PYTHON_VERSION=3.12
PYTHON=python$PYTHON_VERSION
# CHECK PYTHON 3
if command -v $PYTHON &>/dev/null; then
    echo Python3 available
else
    echo Python3 not available, please install it or add to the PATH variable
    exit 1
fi

# CHECK PIP
if command -v $PYTHON -m pip &>/dev/null; then
    echo Pip available
else
    echo Pip not available, please install it or add to the PATH variable
    exit 1
fi

# CHECK VIRTUALENV COMMAND
if command -v $PYTHON -m venv &>/dev/null; then
    echo Venv command available
else
    echo Venv not available, please install it [For example: python3 -m pip install python-venv]
    exit 1
fi

COMMAND=$1
while [[ "$#" -gt 0 ]]; do
    case $1 in
    --python-version)
        PYTHON_VERSION="$2"
        shift
        shift
        ;;
    *)
        COMMAND=$1
        shift
        break
        ;;
    esac
    shift
done
# CHECK VENV NOT EXISTS
if [ ! -d .venv ]; then

    $PYTHON -m venv .venv
    if [ ! -d .pip ]; then
        mkdir .pip
        curl https://bootstrap.pypa.io/get-pip.py -o .pip/get-pip.py
    fi
    .venv/bin/python3 .pip/get-pip.py
    .venv/bin/pip3 install -r requirements.txt
fi

if [ -f '.env' ]; then
    echo Use .env file to read sensitive information
    while IPS='=' read -r key _; do
        if [ "${key}" != "" ] && [[ ! "${key}" =~ .*#.* ]]; then
            eval "export ${key}"
        fi
    done <'.env'
else
    # REGENERATE SENSITIVE INFO FROM TEMPLATE
    cat >'.env' <<EOF
PYTHONPATH=src
S3_SECRET_KEY=Q3AM3UQ867SPQQA43P2F
S3_ACCESS_KEY=zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG
S3_BASE_URL=http://s2d3
EOF
fi

echo EXECUTE
echo "=========== $COMMAND"
echo "$COMMAND ==========="
echo COMMAND

SERVICES=('pg15' 'test22' 's2d3')

#========================================== TERMINAL STUFF =======================================
BOLD=$(tput bold)
NORMAL=$(tput sgr0)

#========================================== COMMANDS =============================================

if [ "$COMMAND" == "run" ]; then
    echo
    echo "${BOLD}" Run: "${NORMAL}" app
    echo
    .venv/bin/python3 -m uvicorn main:app --reload-dir ./src
fi

#========================================== MIGRATIONS ============================================

if [ "$COMMAND" == "alembic" ]; then
    WHAT_IS_RUN=$1
    echo alembic "${WHAT_IS_RUN}" : "$@"
    echo

    if [ ! -d migrations ] || [ "$WHAT_IS_RUN" == "init" ]; then
        .venv/bin/alembic init migrations
        # SQLModel specific:
        # sed -i 's:import sqlalchemy as sa:import sqlalchemy as sa\nimport sqlmodel \# added :g' ./migrations/script.py.mako
        # sed -i 's:from alembic import context:from alembic import context\n\nfrom models import * # necessarily to import something from file where your models are stored\n:g' ./migrations/env.py
        # sed -i 's:target_metadata = None:target_metadata = SQLModel.metadata:g' ./migrations/env.py

        # SQLAlchemy specific
        sed -i 's:from alembic import context:from alembic import context\n\nfrom models import * # necessarily to import something from file where your models are stored\n:g' ./migrations/env.py
        sed -i 's:target_metadata = None:target_metadata = Base.metadata:g' ./migrations/env.py
    fi

    if [ "$WHAT_IS_RUN" == "auto" ]; then
        TIME_STAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        .venv/bin/alembic revision --autogenerate -m "Changes ${TIME_STAMP}"
    elif [ "$WHAT_IS_RUN" == "up" ]; then
        .venv/bin/alembic upgrade head
    elif [ "$WHAT_IS_RUN" != "init" ]; then
        .venv/bin/alembic "$@"
    fi

fi

#========================================== DOCKER-COMPOSE =======================================

function check_folder {
    FOLDER=$1
    mkdir -p "$FOLDER" || exit 1
    chmod a+rwx "$FOLDER"
    for SERVICE in "${SERVICES[@]}"; do
        mkdir -p "$FOLDER/$SERVICE" || exit 1
        chmod a+rwx "$FOLDER/$SERVICE"
    done
}

function check_history_folder {
    FOLDER=.history
    mkdir -p $FOLDER || exit 1
    chmod a+rwx $FOLDER
    for SERVICE in "${SERVICES[@]}"; do
        mkdir -p "$FOLDER/$SERVICE" || exit 1
        chmod a+rwx "$FOLDER/$SERVICE"
        touch "$FOLDER/$SERVICE/.bash_history"
        chmod a+rwx "$FOLDER/$SERVICE/.bash_history"
    done
}

function check_all_folders {
    # Check the data folders
    check_folder .data

    # Check the temporary folders
    check_folder .tmp

    # Check the logger folders
    check_folder .logs

    # Check the home folders
    check_history_folder
}

function start {

    check_all_folders

    if [ "$1" == "" ]; then
        docker-compose up
    else
        # Parse arguments to detect service group "core"
        DOCKER_COMPOSE_ARGUMENTS=
        for ARG in "$@"; do
            if [ "$ARG" == "core" ]; then
                DOCKER_COMPOSE_ARGUMENTS="$DOCKER_COMPOSE_ARGUMENTS ${SERVICES[*]}"
            else
                DOCKER_COMPOSE_ARGUMENTS="$DOCKER_COMPOSE_ARGUMENTS $ARG"
            fi
        done

        docker-compose up $DOCKER_COMPOSE_ARGUMENTS
    fi
}

if [ "$COMMAND" == "up" ] || [ "$COMMAND" == "start" ]; then
    echo 'Run docker images'

    start "$@"

fi

function stop {
    if [ "$1" == "" ]; then
        docker-compose down -v
    else
        docker-compose stop "$@"
    fi
}

if [ "$COMMAND" == "stop" ] || [ "$COMMAND" == "down" ] || [ "$COMMAND" == "finish" ]; then
    echo 'Stop docker images'

    stop "$@"
fi

if [ "$COMMAND" == "restart" ]; then
    echo 'Restart services or whole system'
    stop "$@"
    start "$@"
fi

#========================================== LOGS ==================================================
if [ "$COMMAND" == "log" ] || [ "$COMMAND" == "logs" ]; then
    if [ "$*" == "" ]; then
        echo 'Show logs with timestamp tail <= 10000 entries'
        docker-compose logs -f --tail 10000 --timestamps
    else
        echo "Show logs with timestamp (docker compose logs -f --timestamps $*)"
        docker-compose logs -f --timestamps "$@"
    fi
fi

#========================================== BASIC TOOLS ===========================================

if [ "$COMMAND" == "redeps" ]; then
    echo "Reinstall dependencies"
    .venv/bin/pip3 install -r requirements.txt
fi

if [ "$COMMAND" == "clean" ]; then
    echo "Clean temporary folders"
    find . -name __pycache__ -print0 | xargs -0 rm -fr
fi

#========================================== TESTING TOOLS =========================================

if [ "$COMMAND" == "tests" ] || [ "$COMMAND" == "test" ]; then
    echo Run manage script service/manage.py test service/unit_tests "$@"
    # Sample: ./buildew manage loaddata app_moods/fixtures/geometry_shapes.yaml
    .venv/bin/python3 -m unittest tests "$@"
fi

# ======================================= GENERAL INFO ============================================
if [ "$COMMAND" == "services" ]; then
    echo There are available services:
    for SERVICE in "${SERVICES[@]}"; do
        echo ' - ' $SERVICE
    done
fi

# =================================================================================================
AVAILABLE_COMMANDS="run tests alembic redeps log logs up down"
echo ''
[[ $AVAILABLE_COMMANDS =~ (^| )$COMMAND($| ) ]] && echo 'Ok' || (echo 'Unknown command: ' "$COMMAND" && echo 'Available commands are: ' "$AVAILABLE_COMMANDS")
