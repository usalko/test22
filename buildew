#!/bin/bash

PYTHON_VERSION=3.12
PYTHON=python$PYTHON_VERSION
# CHECK PYTHON 3
if command -v $PYTHON &>/dev/null; then
    echo Python3 available
else
    echo Python3 not available, please install it or add to the PATH variable
    exit 1
fi

# CHECK PIP
if command -v $PYTHON -m pip &>/dev/null; then
    echo Pip available
else
    echo Pip not available, please install it or add to the PATH variable
    exit 1
fi

# CHECK VIRTUALENV COMMAND
if command -v $PYTHON -m venv &>/dev/null; then
    echo Venv command available
else
    echo Venv not available, please install it [For example: python3 -m pip install python-venv]
    exit 1
fi

COMMAND=$1
while [[ "$#" -gt 0 ]]; do
    case $1 in
    --python-version)
        PYTHON_VERSION="$2"
        shift
        shift
        ;;
    *)
        COMMAND=$1
        shift
        break
        ;;
    esac
    shift
done
# CHECK VENV NOT EXISTS
if [ ! -d .venv ]; then

    $PYTHON -m venv .venv
    if [ ! -d .pip ]; then
        mkdir .pip
        curl https://bootstrap.pypa.io/get-pip.py -o .pip/get-pip.py
    fi
    .venv/bin/python3 .pip/get-pip.py
    .venv/bin/pip3 install -r requirements.txt
fi

if [ -f '.env' ]; then
    echo Use .env file to read sensitive information
    while IPS='=' read -r key _; do
        eval "export ${key}"
    done <'.env'
else
    # REGENERATE SENSITIVE INFO FROM TEMPLATE
    cat >'.env' <<EOF
PYTHONPATH=src
S3_SECRET_KEY=Q3AM3UQ867SPQQA43P2F
S3_ACCESS_KEY=zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG
S3_BASE_URL=http://s2d3
EOF
fi

echo EXECUTE
echo "=========== $COMMAND"
echo "$COMMAND ==========="
echo COMMAND

#========================================== TERMINAL STUFF =======================================
BOLD=$(tput bold)
NORMAL=$(tput sgr0)

#========================================== COMMANDS =============================================

if [ "$COMMAND" == "run" ]; then
    WHAT_IS_RUN=$1
    echo Run "${WHAT_IS_RUN}" : "$@"
    echo

    case $WHAT_IS_RUN in
    public)
        .venv/bin/python3 -m uvicorn public_api:public_app --reload
        ;;
    private)
        .venv/bin/python3 -m uvicorn private_api:private_app --reload
        ;;
    *)
        echo "${BOLD}"What need to run?"${NORMAL}" Possible options are: "${BOLD}"public private"${NORMAL}"
        ;;
    esac

fi

if [ "$COMMAND" == "alembic" ]; then
    WHAT_IS_RUN=$1
    echo alembic "${WHAT_IS_RUN}" : "$@"
    echo

    if [ ! -d migrations ]; then
        .venv/bin/alembic init migrations
        sed -ire 's:(^import\s+sqlalchemy\s+as\s+sa):\1\nimport sqlmodel \# added :g' ./migrations/script.py.mako 
    fi

    # TODO: detect first run with empty folder migrations

    .venv/bin/alembic "$@"
fi

#========================================== BASIC TOOLS ===========================================

if [ "$COMMAND" == "redeps" ]; then
    echo "Reinstall dependencies"
    .venv/bin/pip3 install -r requirements.txt
fi

if [ "$COMMAND" == "clean" ]; then
    echo "Clean temporary folders"
    find . -name __pycache__ -print0 | xargs -0 rm -fr
fi

#========================================== RUN TOOLS =============================================

if [ "$COMMAND" == "tests" ] || [ "$COMMAND" == "test" ]; then
    echo Run manage script service/manage.py test service/unit_tests "$@"
    # Sample: ./buildew manage loaddata app_moods/fixtures/geometry_shapes.yaml
    .venv/bin/python3 -m unittest tests "$@"
fi

# ======================================= GENERAL INFO ============================================
if [ "$COMMAND" == "services" ]; then
    echo There are available services:
    for SERVICE in "${SERVICES[@]}"; do
        echo ' - ' $SERVICE
    done
fi

# =================================================================================================
AVAILABLE_COMMANDS="run tests alembic redeps up down"
echo ''
[[ $AVAILABLE_COMMANDS =~ (^| )$COMMAND($| ) ]] && echo 'Ok' || (echo 'Unknown command: ' "$COMMAND" && echo 'Available commands are: ' "$AVAILABLE_COMMANDS")
